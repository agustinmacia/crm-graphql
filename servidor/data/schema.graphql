type Cliente {
        id: ID,
        nombre: String,
        apellido: String,
        empresa: String,
        email: String,
        edad: Int,
        tipo: TipoCliente,
        pedidos: [Pedido]
    }
    type Pedido {
        producto: String
        precio: Int
    }
    enum TipoCliente {
        BASICO
        PREMIUM
    }
    type Email {
        email: String
    }
    
    input PedidoInput{
        producto: String
        precio: Int
    }
    input EmailInput {
        email: String
    }
    """Campos para los clientes nuevos"""
    input ClienteInput {
        id: ID,
        nombre: String!
        apellido: String!
        empresa: String!
        email: String!
        edad: Int!
        tipo: TipoCliente!
        pedidos: [PedidoInput] 
    }
    type Query {
        getClientes(limite: Int) : [Cliente]
        getCliente(id: ID) : Cliente
    }
    """Mutations para crear nuevos clientes"""
    type Mutation {
        #Nombre del Resolver, Input con datos y valor que retorna
        crearCliente(input: ClienteInput) : Cliente
        actualizarCliente(input: ClienteInput) : Cliente
        eliminarCliente(id : ID!) : String
    }